# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  inputs,
  pkgs,
  ...
}:

{

  imports = [
    # acpi_call makes tlp work for newer thinkpads
    # inputs.nixos-hardware.nixosModules.common-pc-laptop-acpi_call
    inputs.nixos-hardware.nixosModules.common-pc-laptop-ssd
    inputs.nixos-hardware.nixosModules.common-gpu-intel
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  networking.useDHCP = lib.mkDefault true;

  # Fingerprint reader: login and unlock with fingerprint (if you add one with `fprintd-enroll`)
  # Start the service at boot
  systemd.services.fprintd = {
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "simple";
  };
  services = {
    fprintd = {
      enable = false;
      package = pkgs.fprintd-tod;
      tod.enable = true;
      # tod.driver = pkgs.libfprint-2-tod1-goodix; # Goodix driver module
      # tod.driver = pkgs.libfprint-2-tod1-vfs0090; # driver for 2016 ThinkPads
      tod.driver = pkgs.libfprint-2-tod1-goodix-550a; # Goodix 550a driver (from Lenovo)
    };
  };

  # powerManagement.cpuFreqGovernor = lib.mkDefault "performance";
  hardware = {
    enableRedistributableFirmware = true;
    cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    # firmware = [
    #   pkgs.sof-firmware
    # ];
    trackpoint = {
      enable = lib.mkDefault true;
      emulateWheel = lib.mkDefault config.hardware.trackpoint.enable;
    };
  };

  hardware.graphics = {
    enable = true;
    enable32Bit = true;
    extraPackages = with pkgs; [
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      # intel-vaapi-driver # LIBVA_DRIVER_NAME=i965 (older but works better for Firefox/Chromium)
      # libvdpau-va-gl
    ];
    extraPackages32 = with pkgs.pkgsi686Linux; [ intel-vaapi-driver ];

  };
  #  services.xserver.videoDrivers = lib.mkDefault [ "intel" ];

  # security.pam.services.sudo = {
  #   text = ''
  #     auth       sufficient   pam_unix.so try_first_pass
  #     auth       sufficient   pam_fprintd.so
  #     auth       required     pam_deny.so
  #   '';
  # };

  #Enable firmware update service
  services.fwupd.enable = lib.mkDefault true;
  # Cooling management
  # services.thermald = {
  #   enable = lib.mkDefault true;
  #   ignoreCpuidCheck = true;
  # };
  hardware.intel-gpu-tools.enable = true;
  #Whether to enable fix for Intel CPU throttling.
  # services.throttled.enable = true;

  #Whether to enable thermald, the temperature management daemon.
  # services.thermald = {
  #   enable = true;
  # };

}
